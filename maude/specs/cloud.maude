fmod PID is
    sort Pid .
    ops p1 p2 p3 : -> Pid [ctor] .
endfm

fmod LABELC is
    sort LabelC .
    ops idlec busy : -> LabelC [ctor] .
endfm

fmod LABELP is
    sort LabelP .
    ops idlep gotval updated : -> LabelP [ctor] .
endfm

fmod SOUP {D :: TRIV} is
    sort Soup{D} .
    subsort D$Elt < Soup{D} .
    op empty : -> Soup{D} [ctor] .
    op _ _ : Soup{D} Soup{D} -> Soup{D} [ctor assoc comm id: empty] .
endfm

fmod PAIR {X :: TRIV, Y :: TRIV} is
    sort Pair{X,Y} .
    op <_,_> : X$Elt Y$Elt -> Pair{X,Y} [ctor] .
***(
    op 1st : Pair{X,Y} -> X$Elt .
    op 2nd : Pair{X,Y} -> Y$Elt .
    var A : X$Elt .
    var B : Y$Elt .
    eq 1st(< A , B >) = A .
    eq 2nd(< A , B >) = B .
)
endfm

fmod TRIPLE {X :: TRIV, Y :: TRIV, Z :: TRIV} is
    sort Triple{X,Y,Z} .
    op <_,_,_> : X$Elt Y$Elt Z$Elt -> Triple{X,Y,Z} [ctor] .
***(
    op 1st+ : Triple{X,Y,Z} -> X$Elt .
    op 2nd+ : Triple{X,Y,Z} -> Y$Elt .
    op 3rd+ : Triple{X,Y,Z} -> Z$Elt .

    var A : X$Elt .
    var B : Y$Elt .
    var C : Z$Elt .
    eq 1st+(< A , B , C >) = A .
    eq 2nd+(< A , B , C >) = B .
    eq 3rd+(< A , B , C >) = C .
)
endfm

view C from TRIV to LABELC is
    sort Elt to LabelC .
endv

view P from TRIV to LABELP is
    sort Elt to LabelP .
endv

view N from TRIV to NAT is
    sort Elt to Nat .
endv

fmod OCOMP is
    pr PAIR{C,N} .
    pr TRIPLE{P,N,N} .
    pr PID .
    sort OComp .
    op (cloud:_) : Pair{C,N} -> OComp [ctor] .
    op (pc[_]:_) : Pid Triple{P,N,N} -> OComp [ctor] .
endfm

view OComp from TRIV to OCOMP is
    sort Elt to OComp .
endv

fmod CONFIG is
    pr SOUP{OComp} .
    sort Config .
    op {_} : Soup{OComp} -> Config [ctor] .
    op init : -> Config .
    eq init = {(cloud: < idlec,2 >) (pc[p1]: < idlep,1,0 >) (pc[p2]: < idlep,2,0 >) (pc[p3]: < idlep,3,0 >)} .
endfm

mod CLOUD is
    inc CONFIG .
    var P : Pid .
    vars PVal GotCVal CVal OldCVal RandVal : Nat .
    var OCs : Soup{OComp} .

    rl [modvalue] : {(pc[P]: < idlep,PVal,OldCVal >) OCs} => {(pc[P]: < idlep,s(PVal),OldCVal >) OCs} .
    rl [getval] : {(cloud: < idlec,CVal >) (pc[P]: < idlep,PVal,OldCVal >) OCs} => {(cloud: < busy,CVal >) (pc[P]: < gotval,PVal,CVal >) OCs} .
    crl [update1] : {(cloud: < busy,CVal >) (pc[P]: < gotval,PVal,GotCVal >) OCs} => {(cloud: < busy,CVal >) (pc[P]: < updated,GotCVal,GotCVal >) OCs} if GotCVal >= PVal .
    crl [update2] : {(cloud: < busy,CVal >) (pc[P]: < gotval,PVal,GotCVal >) OCs} => {(cloud: < busy,PVal >) (pc[P]: < updated,PVal,PVal >) OCs} if GotCVal < PVal .
    rl [gotoidle] : {(cloud: < busy,CVal >) (pc[P]: < updated,PVal,OldCVal >) OCs} => {(cloud: < idlec,CVal >) (pc[P]: < idlep,PVal,OldCVal >) OCs} .
endm